<?php
# Code generated by protoc-gen-volcengine-sdk
# source: Imp
# DO NOT EDIT!

namespace Volc\Service\Imp;

use Exception;
use Throwable;
use Volc\Base\V4Curl;
use Volc\Service\Imp\Models\Request\ImpSubmitJobRequest;
use Volc\Service\Imp\Models\Response\ImpSubmitJobResponse;
use Volc\Service\Imp\Models\Request\ImpKillJobRequest;
use Volc\Service\Imp\Models\Response\ImpKillJobResponse;
use Volc\Service\Imp\Models\Request\ImpRetrieveJobRequest;
use Volc\Service\Imp\Models\Response\ImpRetrieveJobResponse;
use Volc\Service\Imp\ImpOption;

/**
 * Generated from protobuf service <code>imp/service/service_imp.proto</code>
 */
class Imp extends V4Curl
{
    protected $apiList;

    public function __construct()
    {
        $this->region = func_get_arg(0);
        $this->apiList = ImpOption::$apiList;
        parent::__construct($this->region);
    }

    /**
     * @throws Exception
     */
    protected function getConfig(string $region): array
    {
        try {
            return ImpOption::getConfig($region);
        } catch (Exception $e) {
            print_r($e->getMessage());
            print_r($e->getTraceAsString());
            throw $e;
        }
    }

	/**
     * SubmitJob.
     *
     * @param $req ImpSubmitJobRequest
     * @return ImpSubmitJobResponse
     * @throws Exception the exception
	 * @throws Throwable the exception
     */
	public function SubmitJob (ImpSubmitJobRequest $req): ImpSubmitJobResponse
	{
		try {
			$query = ImpUtils::formatRequestParam($req);
			$response = $this->request('SubmitJob', ['query' => $query]);
		} catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }			
		if ($response->getStatusCode() != 200) {
			echo $response->getStatusCode(), "\n";
            echo $response->getBody()->getContents(), "\n";
		}
		$respData = new ImpSubmitJobResponse();
		try {
            $respData = ImpUtils::parseResponseData($response, $respData);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        return $respData;
	}
	
	/**
     * KillJob.
     *
     * @param $req ImpKillJobRequest
     * @return ImpKillJobResponse
     * @throws Exception the exception
	 * @throws Throwable the exception
     */
	public function KillJob (ImpKillJobRequest $req): ImpKillJobResponse
	{
		try {
			$query = ImpUtils::formatRequestParam($req);
			$response = $this->request('KillJob', ['query' => $query]);
		} catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }			
		if ($response->getStatusCode() != 200) {
			echo $response->getStatusCode(), "\n";
            echo $response->getBody()->getContents(), "\n";
		}
		$respData = new ImpKillJobResponse();
		try {
            $respData = ImpUtils::parseResponseData($response, $respData);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        return $respData;
	}
	
	/**
     * RetrieveJob.
     *
     * @param $req ImpRetrieveJobRequest
     * @return ImpRetrieveJobResponse
     * @throws Exception the exception
	 * @throws Throwable the exception
     */
	public function RetrieveJob (ImpRetrieveJobRequest $req): ImpRetrieveJobResponse
	{
		try {
			$query = ImpUtils::formatRequestParam($req);
            $response = $this->request('RetrieveJob', ['query' => $query]);
		} catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }			
		if ($response->getStatusCode() != 200) {
			echo $response->getStatusCode(), "\n";
            echo $response->getBody()->getContents(), "\n";
		}
		$respData = new ImpRetrieveJobResponse();
		try {
            $respData = ImpUtils::parseResponseData($response, $respData);
        } catch (Exception $e) {
            throw $e;
        } catch (Throwable $t) {
            throw $t;
        }
        return $respData;
	}
	
}  // end of service
